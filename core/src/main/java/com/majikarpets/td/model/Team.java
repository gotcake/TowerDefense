package com.majikarpets.td.model;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import com.majikarpets.td.GameRuntimeException;
import com.majikarpets.td.StreamSerializable;
import com.majikarpets.td.util.IntegerPair;

public class Team implements StreamSerializable {
	
	private static int nextTeamId = 1;
	
	/** The relation value for being allies */
	public static final int ALLIES = 1;
	/** The relation value for being neutral */
	public static final int NEUTRAL = 0;
	/** The relation value for being enemies */
	public static final int ENEMIES = -1;

	/** A map containing the relations between teams */
	private static Map<IntegerPair, Integer> teamRelations;
	
	/** Set the relations between two teams */
	public static void setRelations(int teamA, int teamB, int relations) {
		if (relations != ALLIES && relations != NEUTRAL && relations != ENEMIES)
			throw new GameRuntimeException("Invalid team relation: " + relations);
		teamRelations.put(new IntegerPair(teamA, teamB), relations);
		teamRelations.put(new IntegerPair(teamB, teamA), relations);
	}
	
	/** Get the relations between two teams */
	private static int getRelations(int teamA, int teamB) {
		Integer relations = teamRelations.get(new IntegerPair(teamA, teamB));
		return relations == null ? NEUTRAL : relations;
	}
	
	/** The id of the team */
	public final int id;
	
	/** How much money this team has */
	public float money;
	
	/** A list of ALL the units for this team */
	private List<Unit> units;
	
	/** The "castle" or key unit for the player. If this dies, the team loses */
	public Unit castle;
	
	/** The maximum number of towers the team can spawn */
	public int maxTowers;
	
	/** The maximum number of baddies the team can spawn */
	public int maxBaddies;
	
	/** The maximum number of traps the team can spawn */
	public int maxTraps;
	
	/**
	 * Create a new team with the given ID
	 * @param id the team id
	 */
	public Team(int id) {
		this.id = id;
		this.units = new ArrayList<Unit>();
	}
	
	/**
	 * Create a team with the next autogenerated team ID
	 */
	public Team() {
		this(nextTeamId++);
	}
	
	/**
	 * Get the relations of this Team with another Team
	 * @param other the other team
	 * @return the relation value for the two teams
	 */
	public int getRelationsWith(Team other) {
		return getRelations(this.id, other.id);
	}
	
	/**
	 * Remove all units from the team. The units are not modified.
	 */
	public void clearUnits() {
		units.clear();
	}
	
	/** 
	 * Add a unit to the team. The unit is not modified.
	 * @param unit the unit to add
	 */
	public void addUnit(Unit unit) {
		units.add(unit);
	}
	
	/**
	 * Get a collection of units on this team
	 * @return the units on this team
	 */
	public Collection<Unit> getUnits() {
		return units;
	}
	
	/**
	 * Removes a unit from this team. The unit is not modified.
	 * @param unit the unit to remove
	 */
	public void removeUnit(Unit unit) {
		units.remove(unit);
	}

	@Override
	public void serializeBinary(DataOutputStream out) {
		// TODO Auto-generated method stub
	}

	@Override
	public void deserializeBinary(DataInputStream in) {
		// TODO Auto-generated method stub
		
	}

	
}
